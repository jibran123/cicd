pipeline {
    agent any
    stages {
        stage('Checkout - clone the repository') {
            steps {
                echo "====++++Cloning the repository++++===="
                checkout([$class: 'GitSCM', branches: [[name: 'master']],
                        extensions: [[$class: 'LocalBranch', localBranch: 'expected']],
                        userRemoteConfigs: [[url: 'https://github.com/jibran123/cicd',
                        credentialsId: 'jibran-github']]])
            }
            post {
                success {
                    echo "====++++Repository Cloned successfully++++===="
                }
                failure {
                    echo "====++++Could not cloned the repository. Please check the repo URL and credentials++++===="
                }
            }
        }
        stage("Start Docker") {
            steps {
                echo "====++++Executing Start Docker++++===="
                sh 'sh scripts/enableDocker.sh'
            }
            post {
                success {
                    echo "====++++Docker is now up and running. Moving on to check minikube++++===="
                }
                failure {
                    echo "====++++Please install docker manually and start the docker service by using `systectl start docker.service` command++++===="
                }
            }
        }
        stage("Build and Push Docker") {
            environment {
                DOCKERHUBCREDS = credentials('dockerhub')
                dockerhubUsername = "pain13"
            }
            steps {
                echo "====++++Executing Build and Push Docker++++===="
                sh 'sh scripts/dockerImageBuilder.sh $dockerhubUsername $DOCKERHUBCREDS_PSW $application $incrementMajorVersion'
            }
            post {
                success {
                    echo "====++++Docker is now up and running. Moving on to check minikube++++===="
                }
                failure {
                    echo "====++++Please install docker manually and start the docker service by using `systectl start docker.service` command++++===="
                }
            }
        }
        stage("Check if Minikube is setup and running") {
            steps {
                echo "====++++Executing Check if Minikube is setup and running++++===="
                sh 'sh scripts/configureMinikube.sh'
            }
            post {
                success {
                    echo "====++++We are now ready to start deployment on k8 cluster++++===="
                }
                failure {
                    echo "====++++Please install minikube and start the minikube service by using minikube start command++++===="
                }
            }
        }
        stage("Check whether manisfest exists") {
            steps {
                echo "====++++executing Check whether manisfest exists++++===="
                sh "ls k8-manifests/*.yaml"
            }
            post {
                success {
                    echo "====++++k8 manifests found successfully. Proceeding to deploy on k8 cluster++++===="
                }
                failure {
                    echo "====++++Could not find Manifest at specified location. Please check the repository and place the k8 manifests at correct location++++===="
                }
            }
        }
        stage("Run yamllint test") {
            steps {
                echo "====++++Executing YAMLLINT on all k8 manifests++++===="
                sh 'sh scripts/yamllint.sh'
            }
            post {
                success {
                    echo "====++++No Errors found. Manifest looks great :). Proceeding with deployment++++===="
                }
                failure {
                    echo "====++++yamllint found errors. Please check logs for more details.++++===="
                }
            }
        }
        stage("Deploy to k8 cluster minikube") {
            steps {
                echo "====++++Executing Deploy to k8 cluster minikube++++===="
                sh 'kubectl apply -f k8-manifests/'
            }
            post {
                success {
                    echo "====++++Succesfully Deployed to Minikube cluster++++===="
                }
                failure {
                    echo "====++++Failed to Deploy to minikube cluster++++===="
                }
            }
        }
        stage("Check minikube cluster") {
            steps {
                echo "====++++Waiting until pods are created and up and running++++===="
                sleep 60
                echo "====++++Checking the cluster to get the latest status of pods++++===="
                sh 'sh scripts/checkDeployments.sh ${namespace}'
            }
            post {
                success {
                    echo "====++++All pods are up and running. Deployment successful++++===="
                }
                failure {
                    echo "====++++All pods are not in healthy state. Please execute kubectl logs <podname> -n <namespace> to troubleshoot++++===="
                }
            }
        }
    }
}